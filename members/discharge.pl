#!/usr/bin/perl

# Copyright 2011 BibLibre SARL
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Koha; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=head1 NAME

discharge.pl

=head1 DESCRIPTION

Allows librarian to edit and/or manage borrowers' discharges

=cut

use strict;
use warnings;

use CGI;
use C4::Auth;
use C4::Output;
use C4::Members;
use C4::Reserves;
use C4::Letters;
use C4::Discharges;

my $input = new CGI;
my ($template, $loggedinuser, $cookie, $flags) = get_template_and_user( {
    template_name   => 'members/discharge.tmpl',
    query           => $input,
    type            => 'intranet',
    authnotrequired => 0,
    flagsrequired   => { 'borrowers' => '*' },
    debug           => 1,
} );

my $dischargePath    = C4::Context->preference('dischargePath');
my $dischargeWebPath = C4::Context->preference('dischargeWebPath');

my $borrowernumber;
my $data;
if ( $input->param('borrowernumber') ) {
    $borrowernumber = $input->param('borrowernumber');

    # Getting member data
    $data = GetMember( borrowernumber => $borrowernumber );

    # Getting pending issues
    my $issues = GetPendingIssues($borrowernumber);
    my $hasissues = scalar(@$issues);

    # Generating discharge if needed
    if ($input->param('generatedischarge')) {
        # If borrower has pending reserves, we cancel them
        foreach (@reserves) {
            CancelReserve($_->{'reservenumber'});
        } 

        # Debarring member
        # Getting librarian's name
        my $librarian = GetMember('borrowernumber' => $loggedinuser);
        my $librarianname = $librarian->{'firstname'} . " " . $librarian->{'surname'};
        
        # Getting today's date
        my $date = C4::Dates->new()->output();
        # (this is quite ugly, but this is how borrowers seems to be permanently debarred)
        C4::Members::DebarMember($borrowernumber, '9999-12-31', "Discharge generated by $librarianname on $date");

        # Creating message
        my $letter = getletter('members', 'DISCHARGE');
        C4::Letters::parseletter( $letter, 'borrowers',  $borrowernumber );
        my $today = C4::Dates->new()->output();
        $letter->{'title'}   =~ s/<<today>>/$today/g;
        $letter->{'content'} =~ s/<<today>>/$today/g;

        C4::Letters::EnqueueLetter(
            {   letter                 => $letter,
                borrowernumber         => $borrowernumber,
                message_transport_type => 'print',
            }
        );

        # Calling gather_print_notices.pl with borrowernumber and css to create html from letter
        # We place the generated html in a per-user directory
        # We create the per-user directory if it doesn't exist
        mkdir "$dischargePath/$borrowernumber" unless -d "$dischargePath/$borrowernumber";
        my $cssoptions;
        $cssoptions = "-s $dischargePath/discharge.css" if (-e "$dischargePath/discharge.css");
        qx{../misc/cronjobs/gather_print_notices.pl $cssoptions -f discharge -b $borrowernumber $dischargePath/$borrowernumber};
        
        # Calling printoverdues.pl in this same user directory
        qx{../misc/cronjobs/printoverdues.sh $dischargePath/$borrowernumber};

    }

    # Getting reserves
    my @reserves = GetReservesFromBorrowernumber($borrowernumber); 
    my $hasreserves = scalar(@reserves);

    # Getting already generated discharges
    my @list = GetDischarges($borrowernumber);
    my @loop = map {{ url => $dischargeWebPath . "/" . $borrowernumber . "/" . $_, filename => $_ }} @list;
    $template->param("dischargeloop" => \@loop) if (@list);


    $template->param(
        borrowernumber    => $borrowernumber,
        biblionumber      => $data->{'biblionumber'},
        title             => $data->{'title'},
        initials          => $data->{'initials'},
        surname           => $data->{'surname'},
        borrowernumber    => $borrowernumber,
        firstname         => $data->{'firstname'},
        cardnumber        => $data->{'cardnumber'},
        categorycode      => $data->{'categorycode'},
        category_type     => $data->{'category_type'},
        categoryname      => $data->{'description'},
        address           => $data->{'address'},
        address2          => $data->{'address2'},
        city              => $data->{'city'},
        zipcode           => $data->{'zipcode'},
        country           => $data->{'country'},
        phone             => $data->{'phone'},
        email             => $data->{'email'},
        branchcode        => $data->{'branchcode'},
        hasissues         => $hasissues,
        hasreserves       => $hasreserves,
    );

}
# Send parameters to template
 $template->param(
    dischargeview    => 1,
 );

output_html_with_http_headers $input, $cookie, $template->output;
